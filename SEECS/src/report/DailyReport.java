/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package report;

import cashier.CashierMain;
import connection.DBConn;
import connection.DBHandle;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import printreport.IncomeReport;
import printreport.ReportControl;

/**
 *
 * @author Administrator
 */
public class DailyReport extends javax.swing.JPanel {

    DefaultTableModel dtm;
    CashierMain cashierMain;
    JPanel pan;
    Map<String, Object> param = new HashMap<String, Object>();
    ArrayList<IncomeReport> incomeReportList = new ArrayList<IncomeReport>();
    double starttotal = 0.00;
    double soldtotal = 0.00;
    double balancetotal = 0.00;

    /**
     * Creates new form DailyReport
     */
    public DailyReport() {
        initComponents();
        dtm = (DefaultTableModel) tbReport.getModel();
    }

    public DailyReport(CashierMain cashierMain, JPanel pan) {
        initComponents();
        this.cashierMain = cashierMain;
        this.pan = pan;
        dtm = (DefaultTableModel) tbReport.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbReport = new javax.swing.JTable();
        comboReportDate = new org.freixas.jcalendar.JCalendarCombo();
        btView = new javax.swing.JButton();
        btPrint = new javax.swing.JButton();

        setOpaque(false);

        tbReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Model No", "Description", "Open Stock", "Sale Stock", "Close Stock", "Unit Cost", "Unit Price", "Open Stock  Amount", "Sale Stock Amount", "Close Stock Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbReport);
        tbReport.getColumnModel().getColumn(0).setPreferredWidth(100);
        tbReport.getColumnModel().getColumn(1).setPreferredWidth(300);
        tbReport.getColumnModel().getColumn(2).setPreferredWidth(50);
        tbReport.getColumnModel().getColumn(3).setPreferredWidth(50);
        tbReport.getColumnModel().getColumn(4).setPreferredWidth(50);
        tbReport.getColumnModel().getColumn(5).setPreferredWidth(150);
        tbReport.getColumnModel().getColumn(6).setPreferredWidth(150);
        tbReport.getColumnModel().getColumn(7).setPreferredWidth(150);
        tbReport.getColumnModel().getColumn(8).setPreferredWidth(150);
        tbReport.getColumnModel().getColumn(9).setPreferredWidth(150);

        jScrollPane1.setBounds(10, 170, 1080, 402);
        jLayeredPane1.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        comboReportDate.setBounds(740, 70, 280, 20);
        jLayeredPane1.add(comboReportDate, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btView.setText("Report View");
        btView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btViewActionPerformed(evt);
            }
        });
        btView.setBounds(833, 123, 100, 30);
        jLayeredPane1.add(btView, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btPrint.setText("Print");
        btPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btPrintActionPerformed(evt);
            }
        });
        btPrint.setBounds(910, 610, 80, 30);
        jLayeredPane1.add(btPrint, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btViewActionPerformed
        if (tbReport.getRowCount() > 0) {
            int rowcount = tbReport.getRowCount();
            for (int i = 0; i < rowcount; i++) {
                dtm.removeRow(0);
            }
        }
        viewReport();
    }//GEN-LAST:event_btViewActionPerformed

    private void btPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btPrintActionPerformed
        printreport();
    }//GEN-LAST:event_btPrintActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btPrint;
    private javax.swing.JButton btView;
    private org.freixas.jcalendar.JCalendarCombo comboReportDate;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbReport;
    // End of variables declaration//GEN-END:variables

    private void viewReport() {
        String query = "select sit.Model_No,sit.Item_Description,sit.Receive_price,sit.Issue_price,SUM(Item_Qty) as 'Qty' ,so.Order_Date from SoldItem sit NATURAL JOIN SalesOrders so where Date(so.Order_Date)='" + setDateTime() + "' group by sit.Model_No";
        System.out.println(query);
        try {
            ResultSet rst = DBHandle.getData(DBConn.getConnectionToDB(), query);
            while (rst.next()) {
                IncomeReport incomeReport = new IncomeReport();
                incomeReport.setDescription(rst.getString("Item_Description"));
                incomeReport.setModelno(rst.getString("Model_No"));
                incomeReport.setSoldqty(rst.getInt("Qty"));
                incomeReport.setPurchaseunitprice(rst.getDouble("Receive_price"));
                incomeReport.setIssueunitprice(rst.getDouble("Issue_price"));
                incomeReport.setSoldamount(rst.getInt("Qty") * rst.getDouble("Issue_price"));
                incomeReportList.add(incomeReport);
                soldtotal += incomeReport.getSoldamount();
            }
            param.put("totalamount", soldtotal);

            for (IncomeReport incomeReport : incomeReportList) {
                query = "select * from SalesItem where Model_No='" + incomeReport.getModelno() + "'";
                rst = DBHandle.getData(DBConn.getConnectionToDB(), query);
                if (rst.next()) {
                    incomeReport.setBalanceqty(rst.getInt("Item_Qty"));
                    incomeReport.setPurchaseunitprice(rst.getDouble("Receive_price"));
                    incomeReport.setIssueunitprice(rst.getDouble("Issue_price"));
                    incomeReport.setBalanceamount(rst.getInt("Item_Qty") * rst.getDouble("Issue_price"));
                    incomeReport.setStartqty(incomeReport.getSoldqty() + incomeReport.getBalanceqty());
                    incomeReport.setStaramount(incomeReport.getSoldamount() + incomeReport.getBalanceamount());
                    balancetotal += incomeReport.getBalanceamount();
                    starttotal += incomeReport.getStaramount();
                }
            }
            query = "select * from SalesItem where Receive_price>0.00";
            rst = DBHandle.getData(DBConn.getConnectionToDB(), query);
            while (rst.next()) {
                IncomeReport incomeReport = new IncomeReport();
                incomeReport.setDescription(rst.getString("Item_Description"));
                incomeReport.setModelno(rst.getString("Model_No"));
                incomeReport.setBalanceqty(rst.getInt("Item_Qty"));
                incomeReport.setBalanceamount(rst.getInt("Item_Qty") * rst.getDouble("Issue_price"));
                incomeReport.setStartqty(incomeReport.getSoldqty() + incomeReport.getBalanceqty());
                incomeReport.setStaramount(incomeReport.getSoldamount() + incomeReport.getBalanceamount());

                if (!incomeReportList.contains(incomeReport)) {
                    incomeReportList.add(incomeReport);
                    balancetotal += incomeReport.getBalanceamount();
                    starttotal += incomeReport.getStaramount();
                }
            }
            for (IncomeReport incomeReport : incomeReportList) {
            Object[] ob = {incomeReport.getModelno(), incomeReport.getDescription(), incomeReport.getStartqty(), incomeReport.getSoldqty(), incomeReport.getBalanceqty(), incomeReport.getPurchaseunitprice(), incomeReport.getIssueunitprice(), incomeReport.getStaramount(), incomeReport.getSoldamount(), incomeReport.getBalanceamount()};
            dtm.addRow(ob);
        }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ReportControl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ReportControl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void printreport() {
        param.put("totalsales", soldtotal);
        param.put("totalopen", starttotal);
        param.put("totalclose", balancetotal);
        param.put("reprotdate", setDateTime());
        ReportControl.getIncomeReport(param, incomeReportList);
        int rowcount = tbReport.getRowCount();
        for (int i = 0; i < rowcount; i++) {
            dtm.removeRow(0);
        }
    }

    private String setDateTime() {
        SimpleDateFormat SDF = new SimpleDateFormat("yyyy-MM-dd");
        String Date = SDF.format(comboReportDate.getDate());
        System.out.println(Date);
        return Date;
    }
}
