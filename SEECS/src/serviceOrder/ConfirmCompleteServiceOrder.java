/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package serviceOrder;

import componentControl.ValidationValues;
import control.JobDetailControl;
import control.ServiceOrderControl;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.*;
import technician.MyJobDetail;

/**
 *
 * @author Amila
 */
public class ConfirmCompleteServiceOrder extends javax.swing.JDialog {
    Map<String, Object> modelList;
    ServiceOrder serviceOrder;
    ServiceItem item;
    DefaultTableModel dtm;
    ServiceOrderMain serviceOrderMain;
    double totalAmonut;
    double txtvalue;  
    /**
     * Creates new form ConfirmCompleteServiceOrder
     */
    public ConfirmCompleteServiceOrder(java.awt.Frame parent, boolean modal,ServiceOrder serviceOrder,ServiceOrderMain serviceOrderMain) {
        super(parent, modal);
        initComponents();
        this.serviceOrder=serviceOrder;
        this.serviceOrderMain=serviceOrderMain;
        dtm=(DefaultTableModel) tbJobDetail.getModel();
        viewJobsForServiceOrder();
        viewItemRemarks();
        setTotalAmonut();
        checktext();
        checkbt();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        txtJobCode = new javax.swing.JTextField();
        txtJobDescription = new javax.swing.JTextField();
        lbJobCode = new javax.swing.JLabel();
        lbJobDescription = new javax.swing.JLabel();
        lbJobExpensesCharges = new javax.swing.JLabel();
        txtJobExpensesCharges = new javax.swing.JTextField();
        lbWorkManHoursCharges = new javax.swing.JLabel();
        txtJobWorkManHoursCharges = new javax.swing.JTextField();
        lbJobTransportCharges = new javax.swing.JLabel();
        txtJobTransportCharges = new javax.swing.JTextField();
        lbJobOtherExpensesCharges = new javax.swing.JLabel();
        txtJobOtherExpensesCharges = new javax.swing.JTextField();
        lbJobTotalAccessoriesAmount = new javax.swing.JLabel();
        txtJobTotalAccessoriesAmount = new javax.swing.JTextField();
        lbJobWorkManHours = new javax.swing.JLabel();
        txtJobWorkManHours = new javax.swing.JTextField();
        btSetJobCost = new javax.swing.JButton();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbJobDetail = new javax.swing.JTable();
        txtServiceOrderID = new javax.swing.JTextField();
        txtItemBrandName = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        listItemRemark = new javax.swing.JList();
        txtItemDescription = new javax.swing.JTextField();
        lbItemRemarks = new javax.swing.JLabel();
        lbServiceOrderID = new javax.swing.JLabel();
        lbItemBrandName = new javax.swing.JLabel();
        lbItemDescription = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listJobDeficiency = new javax.swing.JList();
        lbJobDeficiency = new javax.swing.JLabel();
        lbTotalCostAmount = new javax.swing.JLabel();
        txtTotalCostAmount = new javax.swing.JTextField();
        btBack = new javax.swing.JButton();
        btConfirmCompleted = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Job Payment Detail"));

        txtJobCode.setEditable(false);
        txtJobCode.setBounds(210, 50, 160, 25);
        jLayeredPane3.add(txtJobCode, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobDescription.setEditable(false);
        txtJobDescription.setBounds(210, 90, 370, 25);
        jLayeredPane3.add(txtJobDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobCode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobCode.setText("Job Code");
        lbJobCode.setBounds(50, 50, 120, 20);
        jLayeredPane3.add(lbJobCode, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobDescription.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobDescription.setText("Job Description");
        lbJobDescription.setBounds(50, 90, 120, 20);
        jLayeredPane3.add(lbJobDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobExpensesCharges.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobExpensesCharges.setText("Job Expenses Charges");
        lbJobExpensesCharges.setBounds(60, 200, 150, 20);
        jLayeredPane3.add(lbJobExpensesCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobExpensesCharges.setEditable(false);
        txtJobExpensesCharges.setBounds(270, 200, 140, 25);
        jLayeredPane3.add(txtJobExpensesCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbWorkManHoursCharges.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbWorkManHoursCharges.setText("Work Man Hours Charges");
        lbWorkManHoursCharges.setBounds(60, 330, 170, 20);
        jLayeredPane3.add(lbWorkManHoursCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobWorkManHoursCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJobWorkManHoursChargesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJobWorkManHoursChargesFocusLost(evt);
            }
        });
        txtJobWorkManHoursCharges.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtJobWorkManHoursChargesKeyReleased(evt);
            }
        });
        txtJobWorkManHoursCharges.setBounds(270, 330, 140, 25);
        jLayeredPane3.add(txtJobWorkManHoursCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobTransportCharges.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobTransportCharges.setText("Transport Charges");
        lbJobTransportCharges.setBounds(60, 370, 150, 20);
        jLayeredPane3.add(lbJobTransportCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobTransportCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJobTransportChargesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJobTransportChargesFocusLost(evt);
            }
        });
        txtJobTransportCharges.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtJobTransportChargesKeyReleased(evt);
            }
        });
        txtJobTransportCharges.setBounds(270, 370, 140, 25);
        jLayeredPane3.add(txtJobTransportCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobOtherExpensesCharges.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobOtherExpensesCharges.setText("Other Expenses Charges");
        lbJobOtherExpensesCharges.setBounds(60, 410, 160, 20);
        jLayeredPane3.add(lbJobOtherExpensesCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobOtherExpensesCharges.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtJobOtherExpensesChargesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtJobOtherExpensesChargesFocusLost(evt);
            }
        });
        txtJobOtherExpensesCharges.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtJobOtherExpensesChargesKeyReleased(evt);
            }
        });
        txtJobOtherExpensesCharges.setBounds(270, 410, 140, 25);
        jLayeredPane3.add(txtJobOtherExpensesCharges, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobTotalAccessoriesAmount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobTotalAccessoriesAmount.setText("Job Total Accessories Amount");
        lbJobTotalAccessoriesAmount.setBounds(60, 240, 200, 20);
        jLayeredPane3.add(lbJobTotalAccessoriesAmount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobTotalAccessoriesAmount.setEditable(false);
        txtJobTotalAccessoriesAmount.setBounds(270, 240, 140, 25);
        jLayeredPane3.add(txtJobTotalAccessoriesAmount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobWorkManHours.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobWorkManHours.setText("Job Work Man Hours");
        lbJobWorkManHours.setBounds(50, 130, 160, 20);
        jLayeredPane3.add(lbJobWorkManHours, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtJobWorkManHours.setEditable(false);
        txtJobWorkManHours.setBounds(210, 130, 140, 25);
        jLayeredPane3.add(txtJobWorkManHours, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btSetJobCost.setText("Set Job Cost");
        btSetJobCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSetJobCostActionPerformed(evt);
            }
        });
        btSetJobCost.setBounds(403, 463, 110, 30);
        jLayeredPane3.add(btSetJobCost, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(680, 110, 650, 510);
        jLayeredPane1.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Service Order Detail"));

        tbJobDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Job Code", "Job Description", "Start Date", "Finish Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbJobDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbJobDetailMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbJobDetailMouseReleased(evt);
            }
        });
        tbJobDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbJobDetailKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbJobDetail);

        jScrollPane1.setBounds(10, 260, 630, 80);
        jLayeredPane2.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtServiceOrderID.setEditable(false);
        txtServiceOrderID.setBounds(220, 30, 160, 25);
        jLayeredPane2.add(txtServiceOrderID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        txtItemBrandName.setBounds(220, 70, 200, 25);
        jLayeredPane2.add(txtItemBrandName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane2.setViewportView(listItemRemark);

        jScrollPane2.setBounds(220, 150, 390, 90);
        jLayeredPane2.add(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        txtItemDescription.setBounds(220, 110, 370, 25);
        jLayeredPane2.add(txtItemDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbItemRemarks.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbItemRemarks.setText("Item Remarks");
        lbItemRemarks.setBounds(60, 150, 120, 20);
        jLayeredPane2.add(lbItemRemarks, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbServiceOrderID.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbServiceOrderID.setText("Service Order ID");
        lbServiceOrderID.setBounds(60, 30, 120, 20);
        jLayeredPane2.add(lbServiceOrderID, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbItemBrandName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbItemBrandName.setText("Item Brand Name");
        lbItemBrandName.setBounds(60, 70, 120, 20);
        jLayeredPane2.add(lbItemBrandName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbItemDescription.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbItemDescription.setText("Item Description");
        lbItemDescription.setBounds(60, 110, 120, 20);
        jLayeredPane2.add(lbItemDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane3.setViewportView(listJobDeficiency);

        jScrollPane3.setBounds(210, 360, 390, 100);
        jLayeredPane2.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbJobDeficiency.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbJobDeficiency.setText("Job Deficiency");
        lbJobDeficiency.setBounds(50, 360, 120, 20);
        jLayeredPane2.add(lbJobDeficiency, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBounds(20, 110, 650, 510);
        jLayeredPane1.add(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbTotalCostAmount.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbTotalCostAmount.setText("Total Cost Amount");
        lbTotalCostAmount.setBounds(30, 640, 160, 20);
        jLayeredPane1.add(lbTotalCostAmount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtTotalCostAmount.setEditable(false);
        txtTotalCostAmount.setBounds(240, 640, 140, 25);
        jLayeredPane1.add(txtTotalCostAmount, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btBack.setText("Back");
        btBack.setBounds(1010, 640, 150, 40);
        jLayeredPane1.add(btBack, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btConfirmCompleted.setText("Confirm Completed");
        btConfirmCompleted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmCompletedActionPerformed(evt);
            }
        });
        btConfirmCompleted.setBounds(1180, 640, 150, 40);
        jLayeredPane1.add(btConfirmCompleted, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1350, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbJobDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbJobDetailMouseClicked
       viewJobDeficiency();
       viewJobPaymentDetail();
       checkbt();
    }//GEN-LAST:event_tbJobDetailMouseClicked

    private void tbJobDetailMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbJobDetailMouseReleased
        viewJobDeficiency();
        viewJobPaymentDetail();
        checkbt();
    }//GEN-LAST:event_tbJobDetailMouseReleased

    private void tbJobDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbJobDetailKeyReleased
        viewJobDeficiency();
        viewJobPaymentDetail();
        checkbt();
    }//GEN-LAST:event_tbJobDetailKeyReleased

    private void txtJobWorkManHoursChargesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobWorkManHoursChargesFocusGained
        txtvalue=Double.parseDouble(txtJobWorkManHoursCharges.getText());
        txtJobWorkManHoursCharges.selectAll();
    }//GEN-LAST:event_txtJobWorkManHoursChargesFocusGained

    private void txtJobWorkManHoursChargesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobWorkManHoursChargesKeyReleased
        ValidationValues.ValidateDoubleValues(txtJobWorkManHoursCharges);
        totalAmonut-=txtvalue;
        txtvalue=Double.parseDouble(txtJobWorkManHoursCharges.getText());
        totalAmonut+=txtvalue;
        txtTotalCostAmount.setText(totalAmonut+"");
        checkbt();
    }//GEN-LAST:event_txtJobWorkManHoursChargesKeyReleased

    private void txtJobTransportChargesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobTransportChargesFocusGained
        txtvalue=Double.parseDouble(txtJobWorkManHoursCharges.getText());
        txtJobTransportCharges.selectAll();
    }//GEN-LAST:event_txtJobTransportChargesFocusGained

    private void txtJobTransportChargesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobTransportChargesKeyReleased
        ValidationValues.ValidateDoubleValues(txtJobTransportCharges);
        totalAmonut-=txtvalue;
        txtvalue=Double.parseDouble(txtJobTransportCharges.getText());
        totalAmonut+=txtvalue;
        txtTotalCostAmount.setText(totalAmonut+"");
        checkbt();
    }//GEN-LAST:event_txtJobTransportChargesKeyReleased

    private void txtJobOtherExpensesChargesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobOtherExpensesChargesFocusGained
        txtvalue=Double.parseDouble(txtJobWorkManHoursCharges.getText());
        txtJobOtherExpensesCharges.selectAll();
    }//GEN-LAST:event_txtJobOtherExpensesChargesFocusGained

    private void txtJobOtherExpensesChargesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtJobOtherExpensesChargesKeyReleased
        ValidationValues.ValidateDoubleValues(txtJobOtherExpensesCharges);
        totalAmonut-=txtvalue;
        txtvalue=Double.parseDouble(txtJobOtherExpensesCharges.getText());
        totalAmonut+=txtvalue;
        txtTotalCostAmount.setText(totalAmonut+"");
    }//GEN-LAST:event_txtJobOtherExpensesChargesKeyReleased

    private void btSetJobCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSetJobCostActionPerformed
        int res=JOptionPane.showConfirmDialog(this, "Do You want to set Job Cost?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (res==JOptionPane.YES_OPTION) {
            setJobCost();
        }
    }//GEN-LAST:event_btSetJobCostActionPerformed

    private void txtJobWorkManHoursChargesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobWorkManHoursChargesFocusLost
        checktext();
        ValidationValues.ValidateCurrency(txtJobWorkManHoursCharges);
    }//GEN-LAST:event_txtJobWorkManHoursChargesFocusLost

    private void txtJobTransportChargesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobTransportChargesFocusLost
        checktext();
        ValidationValues.ValidateCurrency(txtJobTransportCharges);
    }//GEN-LAST:event_txtJobTransportChargesFocusLost

    private void txtJobOtherExpensesChargesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtJobOtherExpensesChargesFocusLost
        checktext();
        ValidationValues.ValidateCurrency(txtJobOtherExpensesCharges);
    }//GEN-LAST:event_txtJobOtherExpensesChargesFocusLost

    private void btConfirmCompletedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmCompletedActionPerformed
        int res=JOptionPane.showConfirmDialog(this, "Do You want to set Confirm Service Order Complete ?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (res==JOptionPane.YES_OPTION) {
            setServiceOrderCompleted();
        }
    }//GEN-LAST:event_btConfirmCompletedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ConfirmCompleteServiceOrder dialog = new ConfirmCompleteServiceOrder(new javax.swing.JFrame(), true,null,null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBack;
    private javax.swing.JButton btConfirmCompleted;
    private javax.swing.JButton btSetJobCost;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbItemBrandName;
    private javax.swing.JLabel lbItemDescription;
    private javax.swing.JLabel lbItemRemarks;
    private javax.swing.JLabel lbJobCode;
    private javax.swing.JLabel lbJobDeficiency;
    private javax.swing.JLabel lbJobDescription;
    private javax.swing.JLabel lbJobExpensesCharges;
    private javax.swing.JLabel lbJobOtherExpensesCharges;
    private javax.swing.JLabel lbJobTotalAccessoriesAmount;
    private javax.swing.JLabel lbJobTransportCharges;
    private javax.swing.JLabel lbJobWorkManHours;
    private javax.swing.JLabel lbServiceOrderID;
    private javax.swing.JLabel lbTotalCostAmount;
    private javax.swing.JLabel lbWorkManHoursCharges;
    private javax.swing.JList listItemRemark;
    private javax.swing.JList listJobDeficiency;
    private javax.swing.JTable tbJobDetail;
    private javax.swing.JTextField txtItemBrandName;
    private javax.swing.JTextField txtItemDescription;
    private javax.swing.JTextField txtJobCode;
    private javax.swing.JTextField txtJobDescription;
    private javax.swing.JTextField txtJobExpensesCharges;
    private javax.swing.JTextField txtJobOtherExpensesCharges;
    private javax.swing.JTextField txtJobTotalAccessoriesAmount;
    private javax.swing.JTextField txtJobTransportCharges;
    private javax.swing.JTextField txtJobWorkManHours;
    private javax.swing.JTextField txtJobWorkManHoursCharges;
    private javax.swing.JTextField txtServiceOrderID;
    private javax.swing.JTextField txtTotalCostAmount;
    // End of variables declaration//GEN-END:variables
    private void viewJobsForServiceOrder() {
        try {
            modelList=JobDetailControl.viewJobDetail(serviceOrder);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MyJobDetail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MyJobDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtServiceOrderID.setText(serviceOrder.getService_Order_ID());
        item=(ServiceItem) modelList.get("Item");
        txtItemDescription.setText(item.getDescription());
        txtItemBrandName.setText(item.getItem_Brand_Name());
        ArrayList<JobDetail> jobDetailList=(ArrayList<JobDetail>) modelList.get("JobDetail");
        for (JobDetail jobDetail : jobDetailList) {
            Object[] row={jobDetail.getJob_Code(),jobDetail.getJob_Deficiency(),jobDetail.getStart_Date(),jobDetail.getFinish_Date()};
            dtm.addRow(row);
        }
        tbJobDetail.requestFocus();
    }
    private void viewJobDeficiency(){
        ArrayList<JobDescription> jobDescriptionList=(ArrayList<JobDescription>) modelList.get("JobDescriptionList");
        DefaultListModel<String> dlm=new DefaultListModel<String>();
        for (JobDescription description : jobDescriptionList) {
            JobDescription jobDescription=new JobDescription(0, description.getJob_Description(), tbJobDetail.getValueAt(tbJobDetail.getSelectedRow(), 0)+"");
            if (description.equals(jobDescription)) {
                dlm.addElement(description.getJob_Description());
            }
        }
        listJobDeficiency.setModel(dlm);
    }
    private void viewJobPaymentDetail(){
        ArrayList<JobDetail> jobDetailList=(ArrayList<JobDetail>) modelList.get("JobDetail");
        JobDetail jobDetail=new JobDetail();
        jobDetail.setJob_Code(tbJobDetail.getValueAt(tbJobDetail.getSelectedRow(), 0)+"");
        int index=jobDetailList.indexOf(jobDetail);
        jobDetail=jobDetailList.get(index);
        System.out.println(jobDetail.getJob_Expenses_Charges());
        System.out.println(jobDetail.getWork_Man_Hours());
        txtJobCode.setText(jobDetail.getJob_Code());
        txtJobDescription.setText(jobDetail.getJob_Deficiency());
        txtJobWorkManHours.setText(jobDetail.getWork_Man_Hours()+"");
        txtJobExpensesCharges.setText(jobDetail.getJob_Expenses_Charges()+"");
        txtJobOtherExpensesCharges.setText(jobDetail.getOther_Expenses_Charges()+"");
        txtJobWorkManHoursCharges.setText(jobDetail.getLabour_Cost()+"");
        txtJobTransportCharges.setText(jobDetail.getTransport_Charges()+"");
    }
    private void viewItemRemarks(){
        try {
            ArrayList<ServiceItemRemark> itemRemarksList=ServiceOrderControl.viewItemRemarks(serviceOrder);
            DefaultListModel<String> dlm=new DefaultListModel<String>();
            for (ServiceItemRemark itemRemark : itemRemarksList) {
                dlm.addElement(itemRemark.getItem_Remarks_Description());
            }
            listItemRemark.setModel(dlm);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void viewAccessoriesTotal(){
        AccessoriesDetail accessoriesDetail=new AccessoriesDetail();
        accessoriesDetail.setJob_Code(tbJobDetail.getValueAt(tbJobDetail.getSelectedRow(), 0)+"");
        
    }
    
    private void setTotalAmonut(){
        ArrayList<JobDetail> jobDetailList=(ArrayList<JobDetail>) modelList.get("JobDetail");
        for (JobDetail jobDetail : jobDetailList) {
            totalAmonut+=jobDetail.getJob_Expenses_Charges()+jobDetail.getLabour_Cost()+jobDetail.getOther_Expenses_Charges()+jobDetail.getTransport_Charges();
        }
        txtTotalCostAmount.setText(totalAmonut+"");
    }
    private void setJobCost(){
        JobDetail jobDetail=new JobDetail();
        jobDetail.setJob_Code(txtJobCode.getText());
        jobDetail.setLabour_Cost(Double.parseDouble(txtJobWorkManHoursCharges.getText()));
        jobDetail.setOther_Expenses_Charges(Double.parseDouble(txtJobOtherExpensesCharges.getText()));
        jobDetail.setTransport_Charges(Double.parseDouble(txtJobTransportCharges.getText()));
        try {
            int res=JobDetailControl.addJobCost(jobDetail);
            if(res==1){
               JOptionPane.showMessageDialog(this, "Success......", "Success", JOptionPane.INFORMATION_MESSAGE);
               clearJobCost();
           }else{
               JOptionPane.showMessageDialog(this, "Fail.........", "Fail", JOptionPane.ERROR_MESSAGE);
           }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void setServiceOrderCompleted(){
        item.setService_Order_ID(txtServiceOrderID.getText());
        item.setWork_Finish_Date(setDateTime());
        serviceOrder.setTotal_Cost_Amount(Double.parseDouble(txtTotalCostAmount.getText()));
        try {
            int res=ServiceOrderControl.confirmcompletedServiceOrder(serviceOrder, item);
            if(res==1){
               JOptionPane.showMessageDialog(this, "Success......", "Success", JOptionPane.INFORMATION_MESSAGE);
               this.dispose();
           }else{
               JOptionPane.showMessageDialog(this, "Fail.........", "Fail", JOptionPane.ERROR_MESSAGE);
           }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ConfirmCompleteServiceOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void checkbt(){
        try {
            modelList=JobDetailControl.viewJobDetail(serviceOrder);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MyJobDetail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MyJobDetail.class.getName()).log(Level.SEVERE, null, ex);
        }
        ArrayList<JobDetailString> jobDetailStringList=(ArrayList<JobDetailString>) modelList.get("JobDetailString");
        btConfirmCompleted.setEnabled(true);
        for (int i = 0; i < jobDetailStringList.size(); i++) {
            JobDetailString jobDetailString=jobDetailStringList.get(i);
            if(jobDetailString.getLabour_Cost()==null||jobDetailString.getOther_Expenses_Charges()==null||jobDetailString.getTransport_Charges()==null){
                btConfirmCompleted.setEnabled(false);
            }else{
                
            }
        }
        if(tbJobDetail.getSelectedRow()!=-1){
            ArrayList<JobDetail> jobDetailList=(ArrayList<JobDetail>) modelList.get("JobDetail");
            JobDetail jobDetail=new JobDetail();
            jobDetail.setJob_Code(tbJobDetail.getValueAt(tbJobDetail.getSelectedRow(), 0)+"");
            int index=jobDetailList.indexOf(jobDetail);
            jobDetail=jobDetailList.get(index);
            JobDetailString jobDetailString=jobDetailStringList.get(index);
            if(jobDetailString.getLabour_Cost()==null||jobDetailString.getOther_Expenses_Charges()==null||jobDetailString.getTransport_Charges()==null){
                 btSetJobCost.setEnabled(true);
            }else if(jobDetail.getTransport_Charges()==Double.parseDouble(txtJobTransportCharges.getText())&&jobDetail.getOther_Expenses_Charges()==Double.parseDouble(txtJobOtherExpensesCharges.getText())&&jobDetail.getLabour_Cost()==Double.parseDouble(txtJobWorkManHoursCharges.getText())){
                btSetJobCost.setEnabled(false);
            }else{
                    btSetJobCost.setEnabled(true);
            }
        }
    }
    private void checktext(){
        if (txtJobExpensesCharges.getText().trim().isEmpty()) {
            txtJobExpensesCharges.setText("0.00");
        }else{
            
        }
        if (txtJobOtherExpensesCharges.getText().trim().isEmpty()) {
            txtJobOtherExpensesCharges.setText("0.00");
        }else{
            
        }
        if (txtJobTotalAccessoriesAmount.getText().trim().isEmpty()) {
            txtJobTotalAccessoriesAmount.setText("0.00");
        }else{
            
        }
        if (txtJobTransportCharges.getText().trim().isEmpty()) {
            txtJobTransportCharges.setText("0.00");
        }else{
            
        }
        if (txtJobWorkManHoursCharges.getText().trim().isEmpty()) {
            txtJobWorkManHoursCharges.setText("0.00");
        }else{
            
        }
    }
    private String setDateTime(){
       SimpleDateFormat SDF=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
       String Date=SDF.format(Calendar.getInstance().getTime());
       System.out.println(Date);
       return Date;
    }
    private void clearJobCost(){
        txtJobCode.setText("");
        txtJobDescription.setText("");
        txtJobExpensesCharges.setText("");
        txtJobTotalAccessoriesAmount.setText("");
        txtJobOtherExpensesCharges.setText("");
        txtJobWorkManHoursCharges.setText("");
        txtJobWorkManHours.setText("");
        txtJobTransportCharges.setText("");
    }
}
