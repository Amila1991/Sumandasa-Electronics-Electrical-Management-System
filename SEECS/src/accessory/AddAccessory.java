/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package accessory;

import componentControl.AutoGenerate;
import componentControl.ValidationValues;
import control.AccessoryControl;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Accessory;

/**
 *
 * @author Amila
 */
public class AddAccessory extends javax.swing.JPanel {
    double unitgetprice;
    DefaultTableModel dtm;
    AccessoryMain accessoryMain;
    JPanel pan;
    
    /**
     * Creates new form AddAccessory
     */
    public AddAccessory(AccessoryMain accessoryMain,JPanel pan) {
        initComponents();
        this.accessoryMain=accessoryMain;
        this.pan=pan;
        dtm=(DefaultTableModel) tbAccessory.getModel();
        txtAccessorycode.setText(AutoGenerate.getNextIDLoop("Accessory", "Accessory_ID", "AC", tbAccessory.getRowCount()));
        checkEmpty();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        lbAccessoryCode = new javax.swing.JLabel();
        lbUnitPurchasingPrice = new javax.swing.JLabel();
        lbUnitIssuePrice = new javax.swing.JLabel();
        lbAccessoriesDescription = new javax.swing.JLabel();
        lbAccessoriesQtyOnHand = new javax.swing.JLabel();
        lbAccessoriesCategoryName = new javax.swing.JLabel();
        btadditemtable = new javax.swing.JButton();
        btAdditemRemoverow = new javax.swing.JButton();
        cmbAccessoriesCategoryName = new javax.swing.JComboBox();
        txtAccessorycode = new javax.swing.JTextField();
        txtAccessoryDescription = new javax.swing.JTextField();
        txtUnitPurchasinhPrice = new javax.swing.JTextField();
        txtUnitIssuePrice = new javax.swing.JTextField();
        txtqtyonhand = new javax.swing.JTextField();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAccessory = new javax.swing.JTable();
        btAdditemaddDB = new javax.swing.JButton();
        jLayeredPane5 = new javax.swing.JLayeredPane();

        jLayeredPane1.setDoubleBuffered(true);
        jLayeredPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jLayeredPane1KeyReleased(evt);
            }
        });

        jLayeredPane2.setDoubleBuffered(true);

        lbAccessoryCode.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbAccessoryCode.setText("Accessory Code");
        lbAccessoryCode.setBounds(40, 60, 130, 20);
        jLayeredPane2.add(lbAccessoryCode, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbUnitPurchasingPrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbUnitPurchasingPrice.setText("Unit Purchasing Price");
        lbUnitPurchasingPrice.setBounds(40, 140, 150, 20);
        jLayeredPane2.add(lbUnitPurchasingPrice, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbUnitIssuePrice.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbUnitIssuePrice.setText("Unit Issue Price");
        lbUnitIssuePrice.setBounds(460, 140, 130, 20);
        jLayeredPane2.add(lbUnitIssuePrice, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbAccessoriesDescription.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbAccessoriesDescription.setText("Accessories Description");
        lbAccessoriesDescription.setBounds(40, 100, 170, 20);
        jLayeredPane2.add(lbAccessoriesDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbAccessoriesQtyOnHand.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbAccessoriesQtyOnHand.setText("Accessory Qty On Hand");
        lbAccessoriesQtyOnHand.setBounds(40, 180, 160, 20);
        jLayeredPane2.add(lbAccessoriesQtyOnHand, javax.swing.JLayeredPane.DEFAULT_LAYER);

        lbAccessoriesCategoryName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbAccessoriesCategoryName.setText("Accessories Category Name");
        lbAccessoriesCategoryName.setBounds(40, 20, 190, 20);
        jLayeredPane2.add(lbAccessoriesCategoryName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btadditemtable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btadditemtable.setText("Add Table");
        btadditemtable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btadditemtableActionPerformed(evt);
            }
        });
        btadditemtable.setBounds(680, 210, 120, 30);
        jLayeredPane2.add(btadditemtable, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btAdditemRemoverow.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btAdditemRemoverow.setText("Remove");
        btAdditemRemoverow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdditemRemoverowActionPerformed(evt);
            }
        });
        btAdditemRemoverow.setBounds(810, 210, 120, 30);
        jLayeredPane2.add(btAdditemRemoverow, javax.swing.JLayeredPane.DEFAULT_LAYER);

        cmbAccessoriesCategoryName.setBounds(230, 20, 340, 25);
        jLayeredPane2.add(cmbAccessoriesCategoryName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtAccessorycode.setEditable(false);
        txtAccessorycode.setBounds(230, 60, 160, 25);
        jLayeredPane2.add(txtAccessorycode, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtAccessoryDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAccessoryDescriptionKeyReleased(evt);
            }
        });
        txtAccessoryDescription.setBounds(230, 100, 500, 25);
        jLayeredPane2.add(txtAccessoryDescription, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtUnitPurchasinhPrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUnitPurchasinhPriceFocusLost(evt);
            }
        });
        txtUnitPurchasinhPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUnitPurchasinhPriceKeyReleased(evt);
            }
        });
        txtUnitPurchasinhPrice.setBounds(230, 140, 160, 25);
        jLayeredPane2.add(txtUnitPurchasinhPrice, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtUnitIssuePrice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUnitIssuePriceFocusLost(evt);
            }
        });
        txtUnitIssuePrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtUnitIssuePriceKeyReleased(evt);
            }
        });
        txtUnitIssuePrice.setBounds(600, 140, 160, 25);
        jLayeredPane2.add(txtUnitIssuePrice, javax.swing.JLayeredPane.DEFAULT_LAYER);

        txtqtyonhand.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtqtyonhandFocusLost(evt);
            }
        });
        txtqtyonhand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtqtyonhandKeyReleased(evt);
            }
        });
        txtqtyonhand.setBounds(230, 180, 160, 25);
        jLayeredPane2.add(txtqtyonhand, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBounds(10, 80, 960, 250);
        jLayeredPane1.add(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setDoubleBuffered(true);

        jScrollPane1.setDoubleBuffered(true);

        tbAccessory.setBackground(new java.awt.Color(0, 204, 255));
        tbAccessory.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 204, 255), 1, true));
        tbAccessory.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        tbAccessory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Accessory Code", "Description", "Unit Purchasing Price", "Unit Selling Price", "Qty On Hand", "Accessories Category Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAccessory.setDoubleBuffered(true);
        tbAccessory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbAccessoryMouseReleased(evt);
            }
        });
        tbAccessory.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                tbAccessoryMouseDragged(evt);
            }
        });
        tbAccessory.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tbAccessoryFocusGained(evt);
            }
        });
        tbAccessory.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbAccessoryKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbAccessory);

        jScrollPane1.setBounds(0, 0, 960, 160);
        jLayeredPane3.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(20, 340, 960, 160);
        jLayeredPane1.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btAdditemaddDB.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btAdditemaddDB.setText("Submit");
        btAdditemaddDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdditemaddDBActionPerformed(evt);
            }
        });
        btAdditemaddDB.setBounds(850, 520, 130, 40);
        jLayeredPane1.add(btAdditemaddDB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 60, 400, new javax.swing.ImageIcon(getClass().getResource("/pictures/accessory/Add New Accessories.png")))); // NOI18N
        jLayeredPane5.setDoubleBuffered(true);
        jLayeredPane5.setBounds(0, 0, 290, 60);
        jLayeredPane1.add(jLayeredPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbAccessoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAccessoryMouseReleased

    }//GEN-LAST:event_tbAccessoryMouseReleased

    private void tbAccessoryMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbAccessoryMouseDragged
        AccessorytableUpdate();
    }//GEN-LAST:event_tbAccessoryMouseDragged

    private void tbAccessoryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbAccessoryKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtAccessoryDescription.requestFocus();
        }
    }//GEN-LAST:event_tbAccessoryKeyReleased

    private void btAdditemaddDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdditemaddDBActionPerformed
        AccessoryaddDB();
    }//GEN-LAST:event_btAdditemaddDBActionPerformed

    private void btAdditemRemoverowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdditemRemoverowActionPerformed
        int rowid[] = tbAccessory.getSelectedRows();
        for (int i = 0; i < rowid.length; i++) {
            dtm.removeRow(rowid[0]);
            tbAccessory.requestFocus();
        }
        int rwc = tbAccessory.getRowCount();
        for (int i = 0; i < rwc; i++) {
            String it = AutoGenerate.getNextIDLoop("item", "Item_Code", "I", i);
            tbAccessory.setValueAt(it, i, 0);
        }
        String s = AutoGenerate.getNextIDLoop("item", "Item_Code", "I", rwc);
        txtAccessorycode.setText(s);
    }//GEN-LAST:event_btAdditemRemoverowActionPerformed

    private void btadditemtableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btadditemtableActionPerformed
        int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Are You want to Update?", "Update Table", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (showConfirmDialog == 0) {
            Addtable();
        }
    }//GEN-LAST:event_btadditemtableActionPerformed

    private void jLayeredPane1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLayeredPane1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jLayeredPane1KeyReleased

    private void txtAccessoryDescriptionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccessoryDescriptionKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUnitPurchasinhPrice.requestFocus();
        }
        checkEmpty();
    }//GEN-LAST:event_txtAccessoryDescriptionKeyReleased

    private void txtUnitPurchasinhPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitPurchasinhPriceKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUnitIssuePrice.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            txtAccessoryDescription.requestFocus();
        }
        ValidationValues.ValidateDoubleValues(txtUnitPurchasinhPrice);
        checkEmpty();
    }//GEN-LAST:event_txtUnitPurchasinhPriceKeyReleased

    private void txtqtyonhandKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtqtyonhandKeyReleased
         if (evt.getKeyCode() == KeyEvent.VK_UP) {
            txtUnitIssuePrice.requestFocus();
        }
        ValidationValues.ValidateIntValue(txtqtyonhand);
        checkEmpty();
    }//GEN-LAST:event_txtqtyonhandKeyReleased

    private void txtUnitIssuePriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUnitIssuePriceKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_ENTER) {
            txtUnitPurchasinhPrice.requestFocus();
        } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
            txtqtyonhand.requestFocus();
        }
        ValidationValues.ValidateDoubleValues(txtUnitIssuePrice);
        checkEmpty();
    }//GEN-LAST:event_txtUnitIssuePriceKeyReleased

    private void txtUnitPurchasinhPriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUnitPurchasinhPriceFocusLost
        if (txtUnitPurchasinhPrice.getText().trim().isEmpty()) {
            txtUnitPurchasinhPrice.setText("0.00");
        }
        ValidationValues.ValidateCurrency(txtUnitPurchasinhPrice);
    }//GEN-LAST:event_txtUnitPurchasinhPriceFocusLost

    private void txtUnitIssuePriceFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUnitIssuePriceFocusLost
        if (txtUnitIssuePrice.getText().trim().isEmpty()) {
            txtUnitIssuePrice.setText("0.00");
        }
        ValidationValues.ValidateCurrency(txtUnitIssuePrice);
    }//GEN-LAST:event_txtUnitIssuePriceFocusLost

    private void tbAccessoryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tbAccessoryFocusGained
        checkEmpty();
    }//GEN-LAST:event_tbAccessoryFocusGained

    private void txtqtyonhandFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtqtyonhandFocusLost
        if (txtqtyonhand.getText().trim().isEmpty()) {
            txtqtyonhand.setText("0.");
        }
    }//GEN-LAST:event_txtqtyonhandFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdditemRemoverow;
    private javax.swing.JButton btAdditemaddDB;
    private javax.swing.JButton btadditemtable;
    private javax.swing.JComboBox cmbAccessoriesCategoryName;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAccessoriesCategoryName;
    private javax.swing.JLabel lbAccessoriesDescription;
    private javax.swing.JLabel lbAccessoriesQtyOnHand;
    private javax.swing.JLabel lbAccessoryCode;
    private javax.swing.JLabel lbUnitIssuePrice;
    private javax.swing.JLabel lbUnitPurchasingPrice;
    private javax.swing.JTable tbAccessory;
    private javax.swing.JTextField txtAccessoryDescription;
    private javax.swing.JTextField txtAccessorycode;
    private javax.swing.JTextField txtUnitIssuePrice;
    private javax.swing.JTextField txtUnitPurchasinhPrice;
    private javax.swing.JTextField txtqtyonhand;
    // End of variables declaration//GEN-END:variables
    private void Addtable() {
        String accessorycode = txtAccessorycode.getText();
        String description = txtAccessoryDescription.getText();
        double unitPurchasePrice = Double.parseDouble(txtUnitPurchasinhPrice.getText());
        double unitIssuePrice = Double.parseDouble(txtUnitIssuePrice.getText());
        int qtyOnHand = Integer.parseInt(txtqtyonhand.getText());
        String accessoriesCategoryName = cmbAccessoriesCategoryName.getSelectedItem() + "";
        Object ob[] = {accessorycode, description, unitPurchasePrice, unitIssuePrice, qtyOnHand, accessoriesCategoryName};
        dtm.addRow(ob);
        clear();
        checkEmpty();
    }
    private void clear(){
        int rw = tbAccessory.getRowCount();
        String s = AutoGenerate.getNextIDLoop("Accessory", "Accessory_ID", "AC", rw);
        txtAccessorycode.setText(s);
        txtAccessoryDescription.setText("");
        txtUnitPurchasinhPrice.setText("0.00");
        txtUnitIssuePrice.setText("0.00");
        cmbAccessoriesCategoryName.setSelectedItem("");
        txtqtyonhand.setText("0");
        txtAccessoryDescription.requestFocus();

    }

    private void AccessorytableUpdate(){
        String AddtableAccessoryDescription = txtAccessoryDescription.getText();
        if (AddtableAccessoryDescription.trim().isEmpty()) {
             txtAccessoryDescription.setText(tbAccessory.getValueAt(tbAccessory.getSelectedRow(), 1)+"");
             txtUnitPurchasinhPrice.setText(tbAccessory.getValueAt(tbAccessory.getSelectedRow(), 2)+"");
             txtUnitIssuePrice.setText(tbAccessory.getValueAt(tbAccessory.getSelectedRow(), 3)+"");
             txtqtyonhand.setText(tbAccessory.getValueAt(tbAccessory.getSelectedRow(), 4)+"");
             cmbAccessoriesCategoryName.setSelectedItem(tbAccessory.getValueAt(tbAccessory.getSelectedRow(), 5)+"");
             dtm.removeRow(tbAccessory.getSelectedRow());
             int rwc=tbAccessory.getRowCount();
             for (int i = 0; i < rwc; i++) {
                 String s=AutoGenerate.getNextIDLoop("Accessory", "Accessory_ID", "AC", i);
                tbAccessory.setValueAt(s, i, 0);
            }
             String lb=AutoGenerate.getNextIDLoop("item", "Item_Code", "I", rwc);
             txtAccessorycode.setText(lb);
         }
    }
    private void AccessoryaddDB(){
        int rw=tbAccessory.getRowCount();
        if (rw!=0) {
            for (int j = 0; j < rw; j++) {
                int showConfirmDialog=JOptionPane.showConfirmDialog(this, "Are You want to Add DB", "ADD Item in Database", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (showConfirmDialog==0) {
                    String AccessoryCode=tbAccessory.getValueAt(0, 0)+"";
                    String AccessoryDescription=tbAccessory.getValueAt(0, 1)+"";
                    double UnitGetPrice=Double.parseDouble(tbAccessory.getValueAt(0, 2)+"");
                    double UnitSellPrice=Double.parseDouble(tbAccessory.getValueAt(0, 3)+"");
                    int Qtyonhand=Integer.parseInt(tbAccessory.getValueAt(0, 4)+"");
                    String AdditemAccessoriesCategoryName=tbAccessory.getValueAt(0, 5)+"";
                    Accessory accessory=new Accessory(AccessoryCode, AccessoryDescription, UnitGetPrice, UnitGetPrice, Qtyonhand, AdditemAccessoriesCategoryName);
                    try {
                        int res=AccessoryControl.addAccessory(accessory);
                        if(res==1){
                            JOptionPane.showMessageDialog(pan, "Accessory added", "Success", JOptionPane.INFORMATION_MESSAGE);
                            clear();
                            checkEmpty();
                        }else{
                            JOptionPane.showMessageDialog(pan, "Accessory Fail", "Fail", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(AddAccessory.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(AddAccessory.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                }
             }
        } else {
            JOptionPane.showMessageDialog(this, "Please Add Accessories........");
        }
        
    }
    private void checkEmpty(){
        if(txtAccessoryDescription.getText().trim().isEmpty()||txtUnitIssuePrice.getText().trim().isEmpty()||txtUnitPurchasinhPrice.getText().trim().isEmpty()||txtqtyonhand.getText().trim().isEmpty()){
            btadditemtable.setEnabled(false);
        }else{
            btadditemtable.setEnabled(true);
        }
        if (tbAccessory.getRowCount()==0) {
            btAdditemaddDB.setEnabled(false);
        }else{
            btAdditemaddDB.setEnabled(true);
        }      
    }
}
