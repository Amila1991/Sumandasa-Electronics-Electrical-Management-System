/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package employee;

import connection.DBConn;
import connection.DBHandle;
import dataFilesControl.FileUtil;
import java.io.IOException;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import login.Loading;
import login.LoginMain;
import model.SystemUser;
import protections.Protector;
import setting.*;

/**
 *
 * @author Amila
 */
public class EmployeeConfirm extends javax.swing.JDialog {

    int no;
    AddNewEmployee addNewEmployee;
    /**
     * Creates new form Confirm
     */
    public EmployeeConfirm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    public EmployeeConfirm(java.awt.Frame parent, boolean modal,int no,AddNewEmployee addNewEmployee) {
        super(parent, modal);
        initComponents();
        this.addNewEmployee=addNewEmployee;
        this.no=no;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        btcancel = new javax.swing.JButton();
        btConfirm = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtconfirmUserName = new javax.swing.JTextField();
        txtconfirmPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Confirm");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Password");
        jLabel1.setBounds(30, 100, 90, 20);
        jLayeredPane1.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btcancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btcancel.setText("Cancel");
        btcancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btcancelActionPerformed(evt);
            }
        });
        btcancel.setBounds(290, 140, 80, 30);
        jLayeredPane1.add(btcancel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btConfirm.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btConfirm.setText("Confirm");
        btConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConfirmActionPerformed(evt);
            }
        });
        btConfirm.setBounds(200, 140, 80, 30);
        jLayeredPane1.add(btConfirm, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Do you want to change Employee Detail ?");
        jLabel2.setBounds(80, 20, 290, 20);
        jLayeredPane1.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("please confrm it.");
        jLabel3.setBounds(80, 40, 130, 20);
        jLayeredPane1.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("User Name");
        jLabel4.setBounds(30, 70, 110, 20);
        jLayeredPane1.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        txtconfirmUserName.setBounds(130, 70, 200, 20);
        jLayeredPane1.add(txtconfirmUserName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        txtconfirmPassword.setBounds(130, 100, 200, 20);
        jLayeredPane1.add(txtconfirmPassword, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConfirmActionPerformed
        addDB();
    }//GEN-LAST:event_btConfirmActionPerformed

    private void btcancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btcancelActionPerformed
        dispose();
    }//GEN-LAST:event_btcancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeConfirm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                EmployeeConfirm dialog = new EmployeeConfirm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConfirm;
    private javax.swing.JButton btcancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPasswordField txtconfirmPassword;
    private javax.swing.JTextField txtconfirmUserName;
    // End of variables declaration//GEN-END:variables
private boolean checkUserName(String userName) {
        boolean returnValue = false;
        String[] developerAccount = new String[2];
        try {
            FileUtil fileUtil = new FileUtil();
            developerAccount = fileUtil.readDeveloperAccount();
        } catch (IOException ex) {
            Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (developerAccount[0].equals(userName)) {
            returnValue = true;
        } else {
            try {
                String query = "select * from SystemUser su NATURAL JOIN EmployeeType et where su.User_Name='" + userName + "' && et.Employee_Type_ID='ET1'";
                ResultSet rst = DBHandle.getData(DBConn.getConnectionToDB(), query);
                if (rst.next()) {
                    returnValue = true;
                } else {
                    returnValue = false;
                }
            } catch (Exception ex) {
                Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return returnValue;
    }

    private boolean checkPasswordwithUserName(String userName, String password) {
        boolean returnValue = false;
        String[] developerAccount = new String[2];
        try {
            FileUtil fileUtil = new FileUtil();
            developerAccount = fileUtil.readDeveloperAccount();
        } catch (IOException ex) {
            Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (developerAccount[0].equals(userName) && developerAccount[1].equals(password)) {
            returnValue = true;
        } else {
            try {
                String query = "select * from SystemUser su NATURAL JOIN EmployeeType et where su.User_Name='" + userName + "' && et.Employee_Type_ID='ET1'";
                ResultSet rst = DBHandle.getData(DBConn.getConnectionToDB(), query);
                if (rst.next()) {
                    String user = rst.getString("User_Name");
                    String pass = rst.getString("Password");
                    System.out.println(user + " " + pass);
                    String d = "";
                    d = Protector.decrypt(pass, user, 5);
                    System.out.println(d);
                    if (userName.equals(user) && password.equals(d)) {
                        returnValue = true;
                    } else {
                        returnValue = false;
                    }
                }
            } catch (Exception ex) {
                Logger.getLogger(LoginMain.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return returnValue;
    }

    private void addDB(){
        if (no==1) {
            addNewEmployee.addEmployee();
        }
        dispose();
    }

    private void checkBt() {
        String userName = txtconfirmUserName.getText();
        System.out.println(userName.toLowerCase());
        String password = new String(txtconfirmPassword.getPassword());
        if (!checkUserName(userName)) {
            btConfirm.setEnabled(false);
        } else if (checkPasswordwithUserName(userName, password)) {
            btConfirm.setEnabled(true);
        } else {
            btConfirm.setEnabled(false);
        }
    }
}

